beads level 1 program TicClient

from remote TicServer import NGAMES, SERV_PORT, TIC_TAC_TOE, GAME_WAITING, GAME_PLAYING, GAME_OVER, 
		a_player, a_game, serv_join_game, serv_take_square, serv_rematch, serv_leave_game 

assets local:"art/" remote:"http://beadslang.com/beads/projects/tictactoe_net/art/"
	file:"beep.mp3" label:BEEP 

//  this is our subscribed copy of the game state from the server
//  we will always have a complete copy at the end of each update
//  since the server owns this structure so best not to modify it
var games : array of a_game  --  array 1..NGAMES of games

//  a_client_conn is from std
var con1 : a_client_conn  --  our connection to server

const
	HOST = "ws://beadslang.com"

	BUTT_BACK = #54938F  // button background color
	BUTT_EDGE = #497F7C  // button edge color
	BUTT_TEXT = WHITE

	//  in this simplified program we will generate automatically our user name & ID
	MY_NAME : str ‚áê random_word4() & '-' & random_word4()
	MY_ID   : num ‚áê runtime.hardware_id

	SCAFFOLDING ‚áê N //  when on, doesn't connect to server, just draws some fake games

------------------
calc main_init 	// one time init for the module
	
	//  connect to our server, and ask for updates 1 per second of the playing games
	if SCAFFOLDING
		//  pretend we connected with a server so we can debug drawing code
		loop reps:NGAMES count:fx
			games[fx].gstate ‚áê GAME_WAITING
		con1.client_status ‚áê CSTATUS_CONNECTED

		//  put a game into slot 1
		merge { gstate:GAME_PLAYING, turn:1, nmoves:2 } ===> games[1]
		merge { userid:MY_ID, name:"Fred", won:0, side:"X" } ===> games[1].players[1]
		merge { userid:101, name:"Penelope", won:3, side:"O" } ===> games[1].players[2]
		merge { 1:1, 3:2 } ===> games[1].board

		//  put another game into slot 3
		merge { gstate:GAME_PLAYING, turn:2, nmoves:3 } ===> games[3]
		merge { userid:101, name:"Penelope", won:1, side:"X" } ===> games[3].players[1]
		merge { userid:102, name:"Sydney", won:0, side:"O" } ===> games[3].players[2]
		merge { 1:1, 4:2, 7:1 } ===> games[3].board

		//  put a stalemate in 7
		merge { gstate:GAME_OVER, turn:2, nmoves:9 } ===> games[7]
		merge { userid:111, name:"Joe", won:1, side:"X" } ===> games[7].players[1]
		merge { userid:103, name:"Maxie", won:0, side:"O" } ===> games[7].players[2]
		merge { 1:1, 2:2, 3:1, 4:2, 5:1, 6:2, 7:1, 8:2, 9:1 } ===> games[7].board

		//  put a half joined game in 9
		merge { turn:1, nmoves:0 } ===> games[9]
		merge { userid:MY_ID, name:"Fred", won:1, side:"X" } ===> games[9].players[1]

		//  put a winner in 12
		merge { gstate:GAME_OVER, turn:2, nmoves:9, winner:2 } ===> games[12]
		merge { userid:111, name:"Poindexter", won:1, side:"X" } ===> games[12].players[1]
		merge { userid:103, name:"Robert", won:0, side:"O" } ===> games[12].players[2]
		merge { 1:1, 2:2, 3:1, 4:2, 5:1, 6:2, 7:1, 8:2, 9:1 } ===> games[12].board

	else
		//  go get the game state from the server
		//  subscribe_start will set the status to CSTATUS_WAITING
		//  for external URLs, use the format: ws:--1.2.3.4 or wss: for secure con1s
		subscribe_start(TIC_TAC_TOE, HOST, SERV_PORT, U, games, con1, echo:Y) 
		
------------------
draw main_draw
	case con1.client_status
	| CSTATUS_WAITING
		//  draw a placeholder graphic
		draw_rect(b.box, color:MEDIUM_PURPLE)
		//  note that on Mac, 269B draws as a color emoji
		draw_str(b.box, "\u269B Connecting to server...", size:50 pt, color:GRAY5)
	| CSTATUS_CONNECTED
		//  draw the array of games
		draw_rect(b.box, color:#4d3f50)
		draw_games
	else
		//  we can't reach the server
		draw_rect(b.box, color:GRAY5)
		//  269C is the fleur du lis symbol
		draw_str(b.box, "\u269C Could not reach server", size:50 pt, color:GRAY5)

------------------
grid draw_games
	//  set up the grid
	horz slice
		var ncol
		var nrow

		//  if landscape, it will be 6 x 2, if portrait 3 x 4
		if is_landscape(b.box)
			//  landscape
			ncol = 6
			nrow = 2
		else
			ncol = 3
			nrow = 4

		skip 6 pt
		loop reps:ncol
			add 10 al 
			skip 6 pt
	vert slice 
		skip 6 pt
		loop reps:nrow
			add 10 al
			skip 6 pt
	cell
		//  we have 6 pts of border around each cell
		d_game(games[b.cell_seq])
track EV_TAP
	//  user has clicked in one of the cells of the grid, which each cell holding a game
	//  join this game if it has at least one empty slot
	if games[b.cell_seq].busy <> Y and (games[b.cell_seq].players[1].userid == U or games[b.cell_seq].players[2].userid == U)
		serv_join_game(games[b.cell_seq], MY_NAME, MY_ID) via con1 
	else
		// invalid choice game is already full or system busy
		sound_play(BEEP)

------------------
vert slice d_game( --  draw a single game
	game : a_game
	)
	//  if the game is full of people not us show in gray, else show joinable/our games in a beige
	var mythick ‚áê 2 pt
	var myfill:color ‚áê BEIGE  //  joinable color
	var border:color ‚áê #f7cf8f  //  joinable border 
	if are_we_in_game(game)
		//  we are inside this game
		myfill ‚áê #b3c5a1  // very pale green
		border ‚áê #96a587  // darker green
		mythick ‚áê 3 pt
	elif game.gstate <> GAME_WAITING
		//  other people have filled this game and so mark it as non-clickable
		myfill ‚áê GRAY2  
		border ‚áê #a59f97
	draw_rect(b.box, fill:myfill, corner:8 pt, thick:mythick, color:border, pos:0)

	//  draw the game as a top bar showing status info, and bottom square for game
	skip 4 pt
	add 20 al d_status(game)
	//if game.gstate <> GAME_WAITING
	add 40 al d_board_outer(game)
	//else
	//	skip 40 al
	skip 4 pt

------------------
horz slice d_status(  --  leave some margins on left and right
	game : a_game
	)
	skip 10 al
	add 100 al d_status2(game)
	skip 10 al

------------------
vert slice d_status2(  --  draw the status area
	game : a_game
	)
	//  band 1: user1, band 2:timer bar, exit, band 3:user2
	skip 5 al
	add 20 al d_username(game, 1)
	skip 5 al
	add 20 al d_middle_row(game)
	skip 5 al
	add 20 al d_username(game, 2)
	skip 5 al

------------------
horz slice d_middle_row(  -- draw timer or stalemate announcement
	game : a_game
	)
	//  left side 50 units - stalemate sign or timer bar
	//  right side 50 units - rematch or exit button
	if game.gstate == GAME_WAITING
		//  we can join this game
		add 50 al d_join(game)

	if are_we_in_game(game) 
		//  we are in this game, and it could be waiting also
		if game.gstate == GAME_OVER
			//  game is over, offer us a rematch
			add 50 al d_rematch(game)
		elif game.gstate == GAME_PLAYING
			//  game is running, show timer
			add 50 al d_timer_bar(game)

		//  if we are playing a game, show an exit button
		skip 6 pt
		add 50 al d_exit(game)

// ------------------
horz slice d_timer_bar(  -- the timer bar which shrinks
	game : a_game
	)
	nop
	//draw_rect(b.box, fill:GRAY8)
// 	//  if the game timer is U, then we aren't putting a time limit on the moves
// 	if game.gstate == GAME_PLAYING and game.timer <> U
// 		draw_str(b.box, "{game.timer} sec", size:b.box.height*0.7)
// 

------------------
draw d_exit(  -- when playing a game, show the exit button
	game : a_game
	)
	d_button(b.box, "Exit")
track EV_TAP
	//  tell server we want to leave the game
	if game.busy
		sound_play(BEEP)  // waiting for server to handle prior command
	else
		serv_leave_game(game, MY_ID) via con1 

------------------
draw d_rematch( -- rematch button
	game : a_game
	)
	d_button(b.box, "Rematch")
track EV_TAP
	//  tell server we want to play again
	if game.busy
		sound_play(BEEP)  // waiting for server to handle prior command
	else
		serv_rematch(game) via con1 

------------------
draw d_join(  -- join button
	game : a_game
	)
	d_button(b.box, "Join")
track EV_TAP
	//  tell server we want to join the game
	if game.busy
		sound_play(BEEP)  // waiting for server to handle prior command
	else
		serv_join_game(game, MY_NAME, MY_ID) via con1 
		
------------------
draw d_username( --  the user name in the sidebar
	game : a_game
	playerx -- player index
	)
	if game.players[playerx].name <> U
		//  someone in game
		//  if your turn, draw heavy wedge-tailed rightwards arrow in dingbats
		var arrow:str = "   "
		var suffix:str = "" 
		var mycolor:color = BLACK

		case game.gstate
		| GAME_PLAYING
			//  game in progress, see if it is our turn
			if game.turn == playerx
				arrow = "\u27BD"  //  is our turn, show arrow			
				mycolor ‚áê DARK_RED

		| GAME_OVER
			//  game is finished, say X/O/nobody has won
			if game.winner == playerx
				suffix ‚áê "Won! üéâ" // u1F839
				mycolor ‚áê DARK_RED

		draw_str(b.box, "{arrow} {game.players[playerx].side}: {game.players[playerx].name} {suffix}", size:b.box.height*0.7, indent:2 pt, color:mycolor, just:LEFT)

------------------
//  the board area will be rectangular, subset to the largest square we can fit
draw d_board_outer(  --  draw the overall playing board
	game : a_game
	)
	var r <=== solve_rect(basis:b.box, pin:MID_CENTER, aspect:1.0, inset:b.box.height/24)
	layer area:r
		d_board(game)

------------------
//  assumes you have supplied a square area
grid d_board(  -- draw the 9 squares
	game : a_game
	)
	//  draw the grid of 9 cells, implicitly uses cell function that immediately follows
	horz slice
		add  100 al 
		skip   10 al 
		add  100 al 
		skip   10 al 
		add  100 al 
	vert slice
		add  100 al 
		skip   10 al 
		add  100 al 
		skip   10 al 
		add  100 al 
	------------------
	under
		//  background fill
		draw_rect (b.box, color:#BDF7FF) -- pale blue
	
	------------------
	cell
		//  inside grid draw function, b has properties cell_box, cell_seq
		//  if this cell is marked for a hilite, make it stand out with a different background color
		var color ‚áê game.hints[b.cell_seq]
		if color <> U
			draw_rect (b.box, fill:color)
		//  draw the X or O for each square that has been played	
		var playerx ‚áê game.board[b.cell_seq]
		if playerx <> U
			draw_str (b.box, game.players[playerx].side, size:b.box.height*0.95, color:CRIMSON)
	------------------
	over
		//  subtle point: we draw the lines after the grid because we are intruding slightly into 
		//  the space of the grid. if we drew the grid first, the grid would be partially obliterated by the cell
		//  calculate the size of the grid lines. almost the full width of the box, fairly thick.
		var indent ‚áê b.box.width/20
		var length ‚áê b.box.width - indent - indent
		var thickness ‚áê b.box.width*12/320  -- 10 would be perfect but air runtime doesn't draw thick lines accurately

		//  horz lines
		var linec = if are_we_in_game(game) then BUTT_BACK else GRAY4
		draw_line (color:linec, x1:indent, y1:b.box.height*1/3, dx:length, dy:0, thick:thickness)
		draw_line (color:linec, x1:indent, y1:b.box.height*2/3, dx:length, dy:0, thick:thickness)

		//  vert lines
		draw_line (color:linec, x1:b.box.width*1/3, y1:indent, dy:length, dx:0, thick:thickness)
		draw_line (color:linec, x1:b.box.width*2/3, y1:indent, dy:length, dx:0, thick:thickness)
------------------
track EV_TAP --  returns true if absorbed
	//  b has properties: b.box, b.cell_seq, b.cell.x/y, b.cell_id.x/y
	//  if it isn't our turn, or the square is already taken, error
	if game.busy <> Y and game.gstate == GAME_PLAYING and is_our_turn(game) and game.board[b.cell_seq] == U
		//  we are in this game, it is our turn, and the square is empty, so take it
		serv_take_square(game, b.cell_seq) via con1 
	else
		log "rejected tap, in_game={are_we_in_game(game)}, our_turn={is_our_turn(game)}, board={game.board[b.cell_seq]}"
		sound_play(BEEP)

------------------
draw d_button(  -- simple button drawing func
	mybox : a_rect
	label : str
	)
	var netbox <=== solve_rect(basis:mybox, pin:MID_CENTER, width:min(mybox.width, 120 pt))
	draw_rect(netbox, fill:BUTT_BACK, thick:2 pt, color:BUTT_EDGE, corner:netbox.height*0.4)
	draw_str(netbox, label, color:BUTT_TEXT, size:netbox.height*0.6, indent:2 pt)

------------------
calc are_we_in_game( -- helper function to determine if we are already in a specific game
	game : a_game
	) :yesno
	return game.players[1].userid == MY_ID or game.players[2].userid == MY_ID

------------------
calc is_our_turn( -- helper function to determine if it is our turn in this game
	game : a_game
	) :yesno
	//  note that we don't need to test for in_game also, because this test is tighter
	case game.turn
	| 1
		// it is player 1's turn, are we player 1?
		return game.players[1].userid == MY_ID
	| 2
		// it is player 1's turn, are we player 2?
		return game.players[2].userid == MY_ID
	else
		return N	
