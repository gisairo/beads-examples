beads level 1 program Watch title "Patek Philippe Wristwatch Simulation"
//  a simulation of the expensive watch in the world, with apologies to Patek Philippe
//  written by edj 2019
//  Copyright and related rights waived

--  art resources that we will use later
assets local:"art/" remote:"http://foobar.com/art/"
	file:"patek_cleaned_750v.jpg" label:watch_background //width:1000 height:750
	file:"hand_day.png" label:day_hand  //width:94 height:23
	file:"hand_min.png" label:minute_hand  //width:294 height:24
	file:"hand_hour.png" label:hour_hand  //width:203 height:37
	file:"hand_sec.png" label:second_hand   //width:172 height:35

var g : a_date --  our global state variable, a record containing fields date_minute, etc.

const
	DEG_PER_DAY  ⇐ 360/31
	DEG_PER_SEC  ⇐ 360/60  -- also used for hour
	DEG_PER_HOUR ⇐ 360/12

	CENTER_X ⇐ 485  -- point that hour/min/sec hands rotate around
	CENTER_Y ⇐ 380

-----------------
calc main_init `main init procedure`
-----------------
	//runtime.time_scale ⇐ 7200  -- speed up time so that each second we cover 2 hours
	//  set up a callback to 'do_tick' every second, starting immediately
	//  note that if we didn't start immediately, then our 'g' value would have no value on first draw
	loom_timer (do_tick, delay:0 sec, interval:1 sec, reps:100)

-----------------
calc do_tick `is called once a second`
-----------------
	seconds_to_date() ===> g  -- copy the current date/time into g
	
----------------
draw main_draw `main drawing procedure` 
----------------
	//  calculate a subset box that is exactly the size we need, centered on the screen
	var area : a_rect <=== solve_rect(basis:b.box, pin:MID_CENTER, width:1000, height:750, round:Y)
	
	//  indent from the total screen size, set coordinate origin at the middle of the box
	layer area:area, origin:5 d_watch

draw d_watch
	draw_image (U, watch_background) -- will draw at [0,0]

	var angle ⇐ g.date_day*DEG_PER_DAY - 90  -- day angle
	draw_image (U, day_hand, x:486, y:512, originx:11, originy:11, angle:angle deg)

	angle ⇐ (g.date_hour + g.date_minute/60)*DEG_PER_HOUR - 90  --  hour angle, moves smoothly
	draw_image (U, hour_hand, x:CENTER_X, y:CENTER_Y, originx:11, originy:18, angle:angle deg)

	angle ⇐ (g.date_minute + g.date_second/60)*DEG_PER_SEC - 90  --  minute hand angle, moves smoothly
	draw_image (U, minute_hand, x:CENTER_X, y:CENTER_Y, originx:11, originy:12, angle:angle deg)

	angle ⇐ round(g.date_second)*DEG_PER_SEC - 90  -- second hand angle, jumps to each second
	draw_image (U, second_hand, x:CENTER_X, y:CENTER_Y, originx:18, originy:17, angle:angle deg)
